// Code generated by go-bindata.
// sources:
// static/favicon.ico
// static/favicon.ico.gif
// templates/error.html
// templates/form.html
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x02\x20\xcc\xc1\x06\x24\xe5\x3f\xff\x4f\x04\x52\x6c\x49\xde\xee\x2e\x0c\x60\xf0\xd3\x79\x77\x3d\x90\x4a\xf6\x74\x71\x0c\xb1\x38\x9d\x9c\xb0\x40\xc0\x60\xd1\xc7\xff\x93\x57\xf1\xdf\x6c\xf8\xbf\xf4\xd6\x91\x97\xef\xf6\x75\x5d\x38\xdd\xe1\x5d\x7c\x5d\xf4\x4d\x9f\xe6\xe5\x44\x17\xc3\x16\xce\xd9\x4a\x31\xb3\x36\x32\x8a\x39\xcd\x4a\x34\x7b\xc4\xe4\xf3\x43\x85\x33\x53\x2d\x83\xc1\x30\x61\x82\xb4\x83\x4f\x4e\x82\x2f\xfb\x0f\x13\xa1\xa9\x7c\x1d\x9c\xb5\x25\xe2\x09\x3b\x98\xe4\x0f\x4c\x9b\xf2\xb0\x6d\x42\xa2\x61\x2a\x03\x83\xe5\x4c\x59\x49\xfb\xdd\xd5\x5a\x20\x6b\x3d\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\xbf\xbc\x68\x98\xae\x00\x00\x00")

func staticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIco,
		"static/favicon.ico",
	)
}

func staticFaviconIco() (*asset, error) {
	bytes, err := staticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico", size: 174, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFaviconIcoGif = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\xcd\x6e\xd4\x30\x10\xc7\x27\x8e\x57\x0a\x70\x19\x71\xe2\x98\xde\x11\xaa\x38\x81\xb8\x18\xa1\x82\xb8\x20\x24\x78\x01\xde\x24\xf0\xb2\x48\x1c\xb9\xd1\x4b\xc8\xe6\xc3\x33\x76\xd3\xc4\xd9\x3a\x6a\xfc\x11\x6d\x55\x4f\xff\x99\xb1\xff\xbf\x38\x8e\x62\x75\x3f\x7d\xfe\xf8\xe6\xed\x0f\x04\x84\xbf\x12\xca\xb2\x3c\x9d\x4e\xb7\xed\x6d\xdb\xb6\xc0\x8e\xab\x7f\xf2\xc9\x09\x24\x5c\xb5\xcf\xbe\xdc\x7c\xff\xf6\xe1\xfd\xd7\x9b\xd7\xaf\xae\xcb\xa2\x93\x5e\x9e\xf5\x73\x3a\x94\x7f\x5e\x74\x4d\xd1\xfd\x54\x92\x52\x87\xa6\x60\x6d\x43\x18\x15\x53\x02\xd9\x90\x56\x75\x91\x22\x49\x74\xa7\x0a\x96\x29\xac\x54\x2a\x25\x60\xae\xf4\x05\x7a\x61\xc8\x0d\xc8\xe7\x44\x64\x2f\xfb\x35\x30\xfb\x4c\x4a\xc4\xfe\xb9\x62\x62\xf6\x2b\xad\x35\xa4\xa5\x63\x5f\x9f\x90\xa8\x7d\xad\x35\xa4\x45\x6e\xbf\x98\x19\x43\xd4\xf6\x1b\x1e\xcc\x5c\xfd\x6a\x8b\x7d\x0f\xf6\xd6\x74\xdf\x57\x5f\xb1\x60\xb2\xc8\x3a\x58\xb4\x0f\x81\xda\x17\x46\x47\x95\xb3\x7d\x88\xc3\x7e\x53\xbb\xda\x87\x50\xed\x17\x96\x7d\xc1\x27\x7f\xfc\xf6\xfb\xa4\xe2\x9e\x7b\x3f\x11\xfb\xfa\xea\xd7\x54\x2c\x45\xfb\xac\xd8\x2f\x88\xd2\x7e\x49\xf6\x7f\x76\x6f\xcb\xfa\x55\x59\xfc\x96\xfd\x4b\x4b\x07\x45\xe7\x5d\xc3\x70\x6a\x77\x14\xac\x2d\xa7\x53\x0a\x23\x1a\x8f\x52\x91\xa6\x23\x5d\x10\xa9\x8c\xee\x00\xac\x0e\xf7\xd3\xa1\x7c\xea\x87\x43\x7f\x4c\xce\x45\xe6\x30\x34\x38\x07\x3d\x45\x13\xe7\x40\x5d\xa9\xfe\x15\x39\x73\x50\xa4\xf5\x11\xf2\x71\x26\xc4\x81\x69\x33\xf3\x01\xcd\x71\xa2\x57\x9f\x01\x71\xe8\xcb\x65\x0e\x08\xe3\x87\x62\x8f\x3e\x83\xe2\x30\xce\x09\x8a\xfd\xf9\xdc\x9f\x03\x38\x72\x90\x0e\x1c\xc6\x45\x02\x42\xe7\x00\xce\x1c\xe4\xea\x73\x33\x1e\x0e\xe0\xcc\x01\x89\x03\x4e\x1d\xc4\xca\xe1\xce\x5c\x51\xa4\x30\x0e\xe3\x3a\x91\x39\x0c\x9f\xcc\x61\x18\x41\xe6\x00\xfd\x22\x91\x39\x98\xf1\xf4\xb7\xcc\xe1\x8e\x0f\xbc\xc4\x67\x84\x1c\xac\x4e\xd1\xc9\x67\xfc\x1c\x2c\x1d\x57\xf4\x7b\xf2\xa3\xe3\xb0\x31\xa6\xc1\xc5\xcd\xc1\xd2\x31\x73\x98\xd3\x59\x1f\x8f\xc7\x81\x29\x2e\x1c\xf0\x02\x9f\x96\x8e\x87\xbc\x2f\x98\x82\x96\x0f\x17\x0e\xeb\xf3\x05\x57\x74\x73\x70\x47\xe5\x00\x96\xcf\x35\x0e\xf6\xfe\xa6\x9d\x0f\xb0\xa4\x87\xcc\x01\x17\x75\x3b\x1f\x16\xf5\x90\x39\x70\x10\xf1\x72\x98\x5b\x1f\xf6\xdb\xbf\x0c\x8b\xc3\x7e\xfb\x97\xc7\xe1\x30\xff\xdc\xb4\x7d\x3f\xe8\xb9\xb9\xa0\x1f\x9d\xc3\xf4\x2b\x62\x0e\x8a\x94\x74\xf7\x27\x61\xd3\xfe\xa4\xbd\x7e\xc4\xc9\x01\x97\xee\x0b\x1d\x3f\xcc\x67\x08\x1c\xf8\x7e\x64\x6a\x1c\xe4\xa6\xf9\x10\xef\xfa\xc0\x38\xd4\x8b\xcf\x0b\x4f\x3e\x8f\xcf\x41\x41\xe6\x00\xe3\x17\x0e\x32\x87\x21\xca\x1c\xc4\x58\x28\x71\x0e\x72\x1a\x5d\xda\x1c\x2a\x3d\xba\xa4\x38\x28\xd2\xa4\xf1\xff\x93\x73\x1c\xfc\xfa\x3c\x32\x87\x5a\x2b\x07\xe1\xf0\xee\x7f\x00\x00\x00\xff\xff\x5f\xeb\x2e\xfd\x9a\x3e\x00\x00")

func staticFaviconIcoGifBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIcoGif,
		"static/favicon.ico.gif",
	)
}

func staticFaviconIcoGif() (*asset, error) {
	bytes, err := staticFaviconIcoGifBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico.gif", size: 16026, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x72\x2d\x2a\xca\x2f\x52\xaa\xad\xe5\xf2\xc8\x2f\x2d\x2e\xc9\xcf\xb3\x52\x08\x4f\x55\xc8\x48\x2c\x4b\x55\x48\x54\xa8\xae\xd6\x4b\x2d\x2a\xaa\xad\x55\x28\x28\xca\x4f\xca\x49\xcd\xd5\xe3\xaa\xae\x4e\xcd\x4b\x01\x2a\x06\x04\x00\x00\xff\xff\xff\x28\x67\x2e\x40\x00\x00\x00")

func templatesErrorHTMLBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHTML,
		"templates/error.html",
	)
}

func templatesErrorHTML() (*asset, error) {
	bytes, err := templatesErrorHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 64, mode: os.FileMode(493), modTime: time.Unix(1465284476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xcf\x92\xd3\x30\x0c\xc6\xef\x7d\x0a\x55\x5c\xe0\x90\xe6\x05\x12\x5f\xca\x32\xc3\x70\xd8\x1d\xda\x0b\x47\xd7\x56\x63\x0f\xfe\x13\x6c\x87\xa1\xe3\xc9\xbb\xa3\x6c\xda\x65\xbb\x30\x64\x72\x90\x15\x4b\xd1\xef\xd3\x57\xab\xa6\xb3\x0d\x04\xa8\x27\xef\x2f\x38\xcf\x9b\x6e\xdb\x34\x70\x34\x36\x03\xbf\x12\xbc\x0d\xd6\x4b\x07\x85\xfc\xe8\x64\x21\x38\xc7\x04\x2a\xe6\x21\x6e\xa1\x69\x04\x5f\xff\xf8\xb8\x3f\x7e\x7b\x7a\x00\x53\xbc\xe3\x33\x7f\xf7\x60\x75\x8f\x2a\x86\x22\x55\x69\x96\x04\x02\x47\x36\x86\x1e\xdb\x5a\x77\x5f\xe8\x32\xcf\x6d\xa6\xa0\x11\x3c\x15\x13\xf9\xf6\xd3\xe3\xe1\x88\x62\xb3\x01\x7e\x3a\x1b\xc6\xa9\x40\xb9\x8c\xd4\x63\xa1\x5f\x05\x21\x48\xcf\x31\x79\x69\x1d\x02\x0f\xa2\xc8\x44\xa7\x29\xbd\xe4\x12\xfd\x98\x6c\x22\xdd\x8a\xee\x94\x5a\xf1\xff\x3e\x9e\x72\x96\x03\xbd\xe9\xf4\x92\xfd\x57\xaf\x5a\x61\xa7\x72\x3a\x7f\xb2\xe4\x34\xb0\x4e\xeb\x1f\x46\xd1\x59\x3f\x2c\xbc\xac\xd2\x40\x90\x93\x62\x46\x25\xc7\xa2\x8c\x5c\x58\xf7\x6b\xf8\x59\xcf\xf3\x6e\x0c\x03\x0b\xe1\x4a\x8f\xd7\x2c\x3c\x17\xa1\xe8\xda\xf1\x86\x2e\xc1\x24\x3a\xf7\xf8\x0e\x21\x06\xe5\xac\xfa\xde\x63\x22\x17\xa5\x7e\xff\x01\xc5\xd7\xe7\x08\xf6\x51\x53\xd7\xca\x2b\xe5\x29\xfd\x8d\x6b\xac\xd6\x14\x56\x5c\x75\x1b\x01\x7e\x4a\x37\x31\xfe\xfd\x58\x28\xde\x76\x78\x5d\x75\x88\x6e\x5a\x36\x77\x2f\xd5\x43\x28\x94\xa0\x18\x62\x2b\x68\x82\x12\x61\x4c\x51\x11\xe9\x3f\xe2\xdd\xef\xf2\xb5\x21\xf2\x74\xf2\x96\x77\xb1\xee\xe5\x76\xba\xce\x76\x90\x17\x30\xe4\x5c\xdc\x22\xb0\xf4\x5d\xbb\xd8\x47\x6c\x6a\x65\xb7\xb0\xea\xbf\x03\x00\x00\xff\xff\x4a\x11\x10\x4d\xb1\x02\x00\x00")

func templatesFormHTMLBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormHTML,
		"templates/form.html",
	)
}

func templatesFormHTML() (*asset, error) {
	bytes, err := templatesFormHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/form.html", size: 689, mode: os.FileMode(493), modTime: time.Unix(1474604931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x6d\x73\x9c\xc8\x11\xfe\x6c\x7e\x45\x9b\xd4\x95\x56\x17\x09\x7c\xce\x97\x94\xb4\x8b\xe3\xf3\xcb\xd9\x95\xa4\xac\x44\xaa\x54\xf9\xe3\x00\xb3\xcb\x9c\x80\xc1\xc3\xa0\xd5\x66\xb3\xff\x3d\x4f\xf7\x80\x84\x64\x9d\xcf\xa9\x54\x9d\x57\x30\xf4\x7b\x3f\xfd\x32\xb7\xdf\x97\x7a\x6d\x5a\x4d\xf1\xc7\xb6\xd4\xb7\xf1\xe1\x10\x2d\x9f\xbf\xfd\xf4\xe6\xea\xf3\xc5\x3b\xaa\x7c\x53\x67\x78\x3f\x3d\x8d\xa2\xab\x4a\xf7\x9a\xbc\x6e\xba\x5a\x79\x4d\x85\x6d\x1a\xdd\xfa\x9e\x4a\xdb\x1e\x79\xea\x2b\xbb\xa5\xa1\x23\xd3\x92\xaf\x34\xf5\xda\xdd\xe8\x92\x3a\xb5\xd1\x09\x81\x73\x47\xca\x69\x5a\x5b\x47\x3b\x3b\x9c\x08\xc9\x56\xe7\xd4\x1b\x48\xb2\xdb\x56\xbb\x24\xfa\x6c\x07\x96\x32\xd4\x25\x64\x77\x3b\xd0\x98\x9e\xd6\xa6\x86\x4e\x4b\xb0\x51\x0d\xb5\x4f\xd8\x20\x11\xe3\xf4\x5a\x3b\xdd\x16\x10\xff\x41\xdd\x40\xf4\x20\x8a\x1b\xd3\x6e\x58\x85\xa3\x56\x6f\xef\x54\x3c\x8f\xa2\xd3\x53\xf8\x31\xba\x53\x69\x55\x66\x51\x44\xc4\x8e\x51\x92\xf6\x5e\x79\x53\xa4\x6b\x75\x63\x0a\xdb\x26\xf8\xa1\x8d\x86\x67\xa3\x13\xaa\xa7\xf9\xb7\x13\xea\x55\xa3\xf9\xd4\xd9\xdc\xfa\x3e\xf1\xb7\x9e\x58\x3c\xe4\xd5\xa6\xbd\x86\x69\xf5\x2a\x86\x27\xce\x17\x83\x27\x66\x8b\xa9\x82\xbd\xab\x78\x2e\x26\x26\xbf\xeb\xf4\x2a\x36\x0d\x62\x94\xde\x9e\x0a\xdd\x23\x21\xff\x23\x2f\x98\x69\xd9\xfb\x5d\xad\xb3\xe8\xd9\x33\x45\x7b\xfc\x3e\xf3\xfa\xd6\x9f\x96\xba\xb0\x0e\x4e\xda\xf6\x8c\x5a\xdb\xea\x73\xfe\x52\xd8\xda\xba\x33\xda\x38\xbd\xe3\xf7\x03\xfe\xd5\x2a\xd7\xb5\xb0\xad\x6d\xeb\x4f\x7b\xf3\x6f\x7d\x46\x7f\x7e\xf1\xc3\xf4\xbd\x73\x3a\x41\xf4\xfd\xd0\xea\xfd\x4c\x44\x6d\x36\x95\x9f\xe4\xcc\x59\x6b\xe5\x36\xda\xc9\x69\xa3\x6e\x4f\x2b\xcd\x84\x67\xf4\xa7\x17\x2f\xba\x5b\x39\xb5\x37\xda\xad\x6b\xbb\x3d\x23\x35\x78\x7b\x1e\x89\x9e\x65\x3a\x3a\xb1\x4c\xc7\x54\x2d\x73\x5b\xee\x48\x4e\x57\xb1\x78\xa4\xa0\xb3\x3d\x2b\x80\x40\xc8\xa7\x06\x7a\x0c\x7c\xfb\x89\xe5\x86\x48\x2c\xab\x9f\x32\x5a\xaa\x89\x69\xee\x2c\x3d\x1d\x93\x29\xd2\x95\xf7\x5d\x7f\x96\xa6\x1b\xe3\xab\x21\x4f\x00\xf4\x54\x69\xe7\xab\xb4\xb0\xfd\xc6\xc6\x99\xfc\x59\xa6\x2a\x83\x79\x3f\x49\xc6\xaa\x97\x4f\xa9\x61\xca\xd6\xab\xc2\x33\x60\x9b\x80\x26\x07\x9e\x97\xb0\x6f\x02\xdf\xb5\xd6\x5d\x40\x7a\xab\x95\x0b\xc8\x15\x6a\x00\x8a\xad\x6f\x01\x35\x96\x2a\x72\xe2\x8c\xb5\x46\x52\x8f\x54\x9a\x1e\x85\xc8\x41\x51\x7e\xe8\xc9\xac\x49\xdf\x9a\x1e\xa8\x05\xe7\x7e\x8f\xd7\xe4\x32\x7c\x39\x1c\x96\xdd\x23\xf3\xba\xc1\x75\x35\x1c\x06\xe1\x48\x05\xa2\xb4\xcb\x22\x61\xd4\x5f\xee\x78\xe3\xab\x4a\xb5\xd7\xfd\x73\xfa\xcc\x86\x35\xba\xef\x01\x38\xda\x2a\xae\x8d\xd6\x27\x68\x16\x8f\x23\x9c\xd7\xc3\x7d\x24\xd3\x38\xfb\xa7\xf6\x83\x6b\xd9\xee\xfd\x5e\xd7\xbd\x66\x6b\xb2\x2b\xb7\x63\xe7\xee\x88\xd4\x46\x19\xa1\x79\xc5\x56\x80\xb0\x2d\xd1\x86\x26\x86\xe0\x2f\x0c\x6b\xed\xe8\xed\x49\x68\x37\x12\x28\xd5\x96\x34\x42\x52\xaa\x70\x0c\x4f\x83\x73\xe5\x2d\x14\x15\xbd\x5b\x0b\x55\xa1\x3a\x5f\x54\x8a\xb6\xc8\x2b\xd9\x8e\x33\xaf\x6a\xe0\xae\x34\x56\xbe\xf7\x43\xfe\xab\x2e\x42\x2d\x2f\x45\xb6\x29\xef\x62\x7f\xca\x07\x31\xe1\x09\x6c\x30\x1a\x91\xfb\xab\xde\x1d\x0e\x29\x02\x51\xc6\x08\x8d\xaf\x2c\xa8\x2f\x3e\x5d\x5e\x49\x15\x73\x1d\x73\x31\x65\xef\x1a\x65\xea\x33\x5a\x9a\xb6\x43\x37\x08\x75\xcb\xf8\x8b\xc7\xdc\x6a\xfe\x1e\x13\x72\x59\xe8\xca\xd6\xa5\x76\xab\x18\x30\xf8\x0b\x43\xa1\x67\xf0\xc5\xe8\x05\x5f\x06\xe3\x74\x99\x22\xff\x41\xe8\x32\x77\xe9\x03\x2d\x97\xc1\xf6\x6f\xe8\x19\xbd\x7b\xa4\x69\x5b\x29\x4f\x0a\x0d\xd7\xd6\x34\x47\x6b\xfc\x0d\x5d\x7f\x0f\x30\x80\x2e\x96\x8f\xbe\x3e\xc1\x74\xc4\xc7\x23\x15\x86\x86\x9e\xc7\x05\x8a\xe6\x39\xa0\x2e\x78\x7a\xe8\xd3\x24\xe6\x09\x95\xfb\x3d\x25\x9c\xc0\xf7\x46\x63\x2e\x00\x0b\x51\xb0\xa4\xcb\x96\xa6\xd9\x48\x82\xa4\x09\xc6\xd4\xbb\x02\x69\x19\x73\xcc\xe9\x79\x13\x1e\x3f\x02\x4a\x49\xd7\x6e\x90\xbb\xda\xaf\xe2\xf1\x94\x02\x57\x26\xa8\x0f\x22\x27\x3c\xfe\x61\xaa\x36\xb2\x6d\x51\x9b\xe2\x7a\x15\xa3\x19\x5b\x55\x2e\x8e\x19\xce\xfc\x44\x6f\x6c\xa9\x19\xaf\xf4\x9f\x19\xdf\x8c\x81\x2b\xf3\x35\x03\x8b\x79\x2e\xb8\x4c\xe5\x4d\xca\x57\x94\xe5\xee\x4e\xad\xe0\x8f\x1d\x91\xa7\x58\xd2\xe0\x6c\xdd\x4f\x75\x35\x16\xfa\x99\xf4\xa8\xaf\x7b\xdf\xef\x78\xbe\x55\x37\xc8\x47\x70\x60\xc5\x22\x82\x01\xc4\x15\x2d\x33\x79\xe8\x79\x64\xaa\xd0\x13\x73\xd5\x63\xe0\xe5\xce\x6e\xd1\xad\x64\x70\x8f\xf5\x71\x5f\x3b\x75\x8d\x3a\xf4\x24\xbd\xa7\xc2\x08\x4e\x46\x79\xf7\xf5\x3c\x59\x52\x62\xb0\xb3\xda\xa7\x4c\xca\xde\x8e\x1f\x65\xc2\x4b\x28\x31\xe5\x45\xa8\xf1\xd3\x12\x01\x8b\xb4\xe3\x1a\xe5\x73\x5e\x11\x44\x4f\x2a\x16\x8d\x71\x9c\xa1\xbd\x32\x65\xa9\xdb\x00\xc5\x62\x52\x47\x37\x0a\x0d\x69\x15\x3f\x34\x21\xa6\x34\x93\x14\xcc\x64\xcc\xf9\x2e\x6d\x3d\x70\x9d\x3f\x04\xf2\x3b\x8e\xb7\x18\x56\x20\xfd\x62\xaf\xb3\x85\xd6\x25\x8b\x8b\xe6\xb2\xe6\x7d\x03\x75\xd7\x18\x3f\x4d\xec\xe9\x6d\x34\xeb\x52\x82\x58\xd7\xf6\xb9\xc8\x58\xa6\x5c\x7b\xdc\x86\x43\x07\x0c\xad\xcc\xa1\x39\xd9\x86\xbe\x0c\x16\xcb\xd2\xda\xe1\x71\xec\x77\x61\xf5\x78\xd0\xf9\xa3\x79\xeb\x3f\x1c\xa6\x16\x1a\x4e\xdf\x07\x36\x6e\xc1\x48\x3c\x1b\x39\x0a\x02\xe8\x6a\xd5\xf7\xf7\xef\x2c\x67\x46\x9e\x82\x7e\x6a\xcb\x77\xb6\x05\xe3\xaa\x01\x9d\x16\x56\x19\x9c\xd6\x3b\x6c\x80\xde\x34\xa1\x11\x8b\x92\xaf\x47\x36\xd5\x7a\xed\xcf\xa9\xb3\x58\xcc\x64\xf6\xaa\xbc\xe7\x70\xeb\x73\xc2\x36\xe5\x6d\x73\x46\x3c\xc4\x85\xec\x7e\xa0\xc3\x9c\x0f\xc6\xc3\x23\xba\x31\x60\xb4\x0e\xe5\x61\xb0\xfd\x61\xc5\x03\x1b\x02\x53\xa2\x55\x74\xce\xb4\x7e\x4d\xf1\x0f\x7d\x4c\x0b\xb6\x23\x90\x24\x3f\x83\x80\x5f\x8f\x01\xbe\x28\x38\x13\x8c\x97\xc1\xcb\xa3\xa4\xa7\x4d\x87\x6e\xd2\xae\x2d\x87\x13\x32\xef\x2b\xe3\x94\xbf\xac\x6b\xb5\x49\xa2\x67\x64\xaf\x39\xed\x4e\x37\xd8\x5b\x98\x12\x4d\x1a\xd3\xb0\xf5\x7c\x3a\x8e\x72\xf4\x53\xd8\x71\x83\x15\x39\x99\x25\xe4\x62\xc8\xd1\x19\x64\x62\xfc\x1f\x81\x79\xf9\x44\x64\x1e\x4e\x66\x2e\x4f\xde\xa4\x1a\xde\x68\x55\x8d\x8c\xe4\xa8\xa3\xb6\x70\xbb\x8e\x63\x24\xa3\xef\x97\x8b\x5f\xc2\xb6\x5d\x20\x73\xcb\x3c\x1b\x3f\x87\xe5\x63\x92\x94\x6b\x60\x81\xf7\xf8\xb6\x44\x14\x96\x69\x9e\xf1\xc6\x0b\x06\x18\xec\x14\x77\x94\x42\x49\x8d\x24\xd1\x5d\x29\x77\xe2\x24\x02\x31\x9f\xee\x38\x4c\x54\x5f\xc4\x19\x37\x0b\x2e\xf4\x64\x42\xd0\x98\x89\xdf\x8c\x87\xe3\x65\xf1\x3b\x90\xe2\xc2\x52\x39\x05\x44\x32\xcb\xee\xa1\x3a\x73\x95\x23\x04\xe1\x86\x32\xe5\x69\x5a\x9c\xc4\x5d\x19\x4b\x84\xbd\xac\xe7\x72\xc7\x7f\x3f\xf2\xf1\x8f\x80\x02\x36\x0d\xb9\x5d\x3c\x5a\xa7\x1e\xd7\xd4\xbf\x02\xeb\xe1\x10\x24\x01\xa7\x77\x27\x8f\x0a\x46\xec\xba\xe4\xbd\x45\x16\x7c\x58\xd2\x43\x55\x31\x76\x93\x85\xb7\x5e\xf2\x35\x87\xd8\x31\x6b\xff\x6a\x87\x7d\xb0\x62\xfd\xde\xb2\xfa\xa9\x43\x4f\xbc\x0c\x8a\xde\x3b\xad\xf1\xbc\xf6\x5b\x15\x52\x41\xf9\xee\xeb\x15\xf9\x49\xf1\x22\x33\x19\x95\x60\x4a\x65\x72\x10\x96\xe0\x31\x8b\xec\xde\x6e\x44\xd5\x58\x21\x70\x68\xac\x31\xc3\xae\xfd\xaa\x6e\x80\x04\x67\x3a\x3f\xd5\x4e\x8b\xee\x79\x82\x8e\xdf\x8f\x77\x3a\x86\x11\x17\xdd\x9b\xd7\x17\x57\x6f\x3e\xbc\xa6\x13\x69\xfd\x32\xa0\xee\xd6\x34\xf4\xe7\x76\xc3\x47\x35\xfe\x0e\x72\xc1\x94\x76\x13\x24\x67\x11\x6e\x82\xb2\xa4\x01\xbb\xfe\xd2\x15\xff\x18\xb4\xdb\x2d\xf4\x09\x7d\x39\xc6\x85\x88\xd0\x79\x1d\x4f\x4c\xa2\x15\xe9\x04\x0f\xe7\xe3\x59\x87\x03\xbc\x26\x86\x6f\xc1\x9f\xd6\x8b\xa3\x57\x47\xc7\xfc\x0d\x96\x2e\x3a\xca\x56\xf4\x22\xf0\x93\x70\x07\x5a\x74\xf3\xde\xbb\xc5\x0b\x98\x29\xb4\x07\xfc\x13\xa1\xe1\x3b\xfd\x91\xe2\x57\x31\x7e\xbf\x44\x87\x7b\xb3\x66\xbb\x01\x04\x8e\xda\x35\x38\x4a\x5b\x0c\x7c\xa5\x4e\x70\xf9\x7c\x57\x6b\x7e\xfc\x79\xf7\xb1\x5c\x1c\x89\xef\x47\xc7\x51\x90\xce\xc9\x4a\x26\x10\xaf\xe8\xc8\xb4\xc0\x93\x3e\x3a\x97\xaf\x5c\xfb\xd3\x07\xef\x86\x70\xec\x64\x07\xa7\xb5\x02\x6e\xcf\xe7\xa6\x48\x28\xf5\xdf\xf0\xb3\xb8\x0f\xce\x77\x99\x12\xe2\xf2\x95\x35\xd0\x9a\xd7\xb6\xb8\x3e\x9a\x62\x35\x73\x36\x04\x68\xa6\x7d\xda\xaa\x84\x74\x9e\xac\xdf\xd4\x2e\x4b\xdb\xd1\xf1\x09\x8d\x1b\xd9\x8a\x83\xbb\xe0\x9b\xfe\x5b\xf4\xdb\xc5\xf1\x31\x73\x5c\xa1\xd3\xe3\xf1\xfc\x7b\x85\x8e\x2e\x9d\x7c\x4b\xd0\xe3\x08\xe2\x86\x3a\xa2\x0d\x8f\x7c\x37\x95\xbb\xaa\xfc\xdf\x85\xa9\xdc\xff\x1b\x00\x00\xff\xff\x99\xc0\x42\x3b\x58\x11\x00\x00")

func templatesIndexHTMLBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHTML,
		"templates/index.html",
	)
}

func templatesIndexHTML() (*asset, error) {
	bytes, err := templatesIndexHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 4440, mode: os.FileMode(493), modTime: time.Unix(1474605012, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico":     staticFaviconIco,
	"static/favicon.ico.gif": staticFaviconIcoGif,
	"templates/error.html":   templatesErrorHTML,
	"templates/form.html":    templatesFormHTML,
	"templates/index.html":   templatesIndexHTML,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico":     &bintree{staticFaviconIco, map[string]*bintree{}},
		"favicon.ico.gif": &bintree{staticFaviconIcoGif, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"error.html": &bintree{templatesErrorHTML, map[string]*bintree{}},
		"form.html":  &bintree{templatesFormHTML, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHTML, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
