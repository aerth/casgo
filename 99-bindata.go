// Code generated by go-bindata.
// sources:
// static/favicon.ico
// static/favicon.ico.gif
// templates/error.html
// templates/form.html
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x02\x20\xcc\xc1\x06\x24\xe5\x3f\xff\x4f\x04\x52\x6c\x49\xde\xee\x2e\x0c\x60\xf0\xd3\x79\x77\x3d\x90\x4a\xf6\x74\x71\x0c\xb1\x38\x9d\x9c\xb0\x40\xc0\x60\xd1\xc7\xff\x93\x57\xf1\xdf\x6c\xf8\xbf\xf4\xd6\x91\x97\xef\xf6\x75\x5d\x38\xdd\xe1\x5d\x7c\x5d\xf4\x4d\x9f\xe6\xe5\x44\x17\xc3\x16\xce\xd9\x4a\x31\xb3\x36\x32\x8a\x39\xcd\x4a\x34\x7b\xc4\xe4\xf3\x43\x85\x33\x53\x2d\x83\xc1\x30\x61\x82\xb4\x83\x4f\x4e\x82\x2f\xfb\x0f\x13\xa1\xa9\x7c\x1d\x9c\xb5\x25\xe2\x09\x3b\x98\xe4\x0f\x4c\x9b\xf2\xb0\x6d\x42\xa2\x61\x2a\x03\x83\xe5\x4c\x59\x49\xfb\xdd\xd5\x5a\x20\x6b\x3d\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\xbf\xbc\x68\x98\xae\x00\x00\x00")

func staticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIco,
		"static/favicon.ico",
	)
}

func staticFaviconIco() (*asset, error) {
	bytes, err := staticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico", size: 174, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFaviconIcoGif = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\xcd\x6e\xd4\x30\x10\xc7\x27\x8e\x57\x0a\x70\x19\x71\xe2\x98\xde\x11\xaa\x38\x81\xb8\x18\xa1\x82\xb8\x20\x24\x78\x01\xde\x24\xf0\xb2\x48\x1c\xb9\xd1\x4b\xc8\xe6\xc3\x33\x76\xd3\xc4\xd9\x3a\x6a\xfc\x11\x6d\x55\x4f\xff\x99\xb1\xff\xbf\x38\x8e\x62\x75\x3f\x7d\xfe\xf8\xe6\xed\x0f\x04\x84\xbf\x12\xca\xb2\x3c\x9d\x4e\xb7\xed\x6d\xdb\xb6\xc0\x8e\xab\x7f\xf2\xc9\x09\x24\x5c\xb5\xcf\xbe\xdc\x7c\xff\xf6\xe1\xfd\xd7\x9b\xd7\xaf\xae\xcb\xa2\x93\x5e\x9e\xf5\x73\x3a\x94\x7f\x5e\x74\x4d\xd1\xfd\x54\x92\x52\x87\xa6\x60\x6d\x43\x18\x15\x53\x02\xd9\x90\x56\x75\x91\x22\x49\x74\xa7\x0a\x96\x29\xac\x54\x2a\x25\x60\xae\xf4\x05\x7a\x61\xc8\x0d\xc8\xe7\x44\x64\x2f\xfb\x35\x30\xfb\x4c\x4a\xc4\xfe\xb9\x62\x62\xf6\x2b\xad\x35\xa4\xa5\x63\x5f\x9f\x90\xa8\x7d\xad\x35\xa4\x45\x6e\xbf\x98\x19\x43\xd4\xf6\x1b\x1e\xcc\x5c\xfd\x6a\x8b\x7d\x0f\xf6\xd6\x74\xdf\x57\x5f\xb1\x60\xb2\xc8\x3a\x58\xb4\x0f\x81\xda\x17\x46\x47\x95\xb3\x7d\x88\xc3\x7e\x53\xbb\xda\x87\x50\xed\x17\x96\x7d\xc1\x27\x7f\xfc\xf6\xfb\xa4\xe2\x9e\x7b\x3f\x11\xfb\xfa\xea\xd7\x54\x2c\x45\xfb\xac\xd8\x2f\x88\xd2\x7e\x49\xf6\x7f\x76\x6f\xcb\xfa\x55\x59\xfc\x96\xfd\x4b\x4b\x07\x45\xe7\x5d\xc3\x70\x6a\x77\x14\xac\x2d\xa7\x53\x0a\x23\x1a\x8f\x52\x91\xa6\x23\x5d\x10\xa9\x8c\xee\x00\xac\x0e\xf7\xd3\xa1\x7c\xea\x87\x43\x7f\x4c\xce\x45\xe6\x30\x34\x38\x07\x3d\x45\x13\xe7\x40\x5d\xa9\xfe\x15\x39\x73\x50\xa4\xf5\x11\xf2\x71\x26\xc4\x81\x69\x33\xf3\x01\xcd\x71\xa2\x57\x9f\x01\x71\xe8\xcb\x65\x0e\x08\xe3\x87\x62\x8f\x3e\x83\xe2\x30\xce\x09\x8a\xfd\xf9\xdc\x9f\x03\x38\x72\x90\x0e\x1c\xc6\x45\x02\x42\xe7\x00\xce\x1c\xe4\xea\x73\x33\x1e\x0e\xe0\xcc\x01\x89\x03\x4e\x1d\xc4\xca\xe1\xce\x5c\x51\xa4\x30\x0e\xe3\x3a\x91\x39\x0c\x9f\xcc\x61\x18\x41\xe6\x00\xfd\x22\x91\x39\x98\xf1\xf4\xb7\xcc\xe1\x8e\x0f\xbc\xc4\x67\x84\x1c\xac\x4e\xd1\xc9\x67\xfc\x1c\x2c\x1d\x57\xf4\x7b\xf2\xa3\xe3\xb0\x31\xa6\xc1\xc5\xcd\xc1\xd2\x31\x73\x98\xd3\x59\x1f\x8f\xc7\x81\x29\x2e\x1c\xf0\x02\x9f\x96\x8e\x87\xbc\x2f\x98\x82\x96\x0f\x17\x0e\xeb\xf3\x05\x57\x74\x73\x70\x47\xe5\x00\x96\xcf\x35\x0e\xf6\xfe\xa6\x9d\x0f\xb0\xa4\x87\xcc\x01\x17\x75\x3b\x1f\x16\xf5\x90\x39\x70\x10\xf1\x72\x98\x5b\x1f\xf6\xdb\xbf\x0c\x8b\xc3\x7e\xfb\x97\xc7\xe1\x30\xff\xdc\xb4\x7d\x3f\xe8\xb9\xb9\xa0\x1f\x9d\xc3\xf4\x2b\x62\x0e\x8a\x94\x74\xf7\x27\x61\xd3\xfe\xa4\xbd\x7e\xc4\xc9\x01\x97\xee\x0b\x1d\x3f\xcc\x67\x08\x1c\xf8\x7e\x64\x6a\x1c\xe4\xa6\xf9\x10\xef\xfa\xc0\x38\xd4\x8b\xcf\x0b\x4f\x3e\x8f\xcf\x41\x41\xe6\x00\xe3\x17\x0e\x32\x87\x21\xca\x1c\xc4\x58\x28\x71\x0e\x72\x1a\x5d\xda\x1c\x2a\x3d\xba\xa4\x38\x28\xd2\xa4\xf1\xff\x93\x73\x1c\xfc\xfa\x3c\x32\x87\x5a\x2b\x07\xe1\xf0\xee\x7f\x00\x00\x00\xff\xff\x5f\xeb\x2e\xfd\x9a\x3e\x00\x00")

func staticFaviconIcoGifBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIcoGif,
		"static/favicon.ico.gif",
	)
}

func staticFaviconIcoGif() (*asset, error) {
	bytes, err := staticFaviconIcoGifBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico.gif", size: 16026, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x72\x2d\x2a\xca\x2f\x52\xaa\xad\xe5\xf2\xc8\x2f\x2d\x2e\xc9\xcf\xb3\x52\x08\x4f\x55\xc8\x48\x2c\x4b\x55\x48\x54\xa8\xae\xd6\x4b\x2d\x2a\xaa\xad\x55\x28\x28\xca\x4f\xca\x49\xcd\xd5\xe3\xaa\xae\x4e\xcd\x4b\x01\x2a\x06\x04\x00\x00\xff\xff\xff\x28\x67\x2e\x40\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 64, mode: os.FileMode(493), modTime: time.Unix(1465284476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x73\x13\x3d\x0c\x3d\x7f\xf9\x15\xaa\xbf\x0b\x1c\x9a\xbd\xb7\xbb\x66\x98\xb4\xcc\x30\x30\xd3\x0e\xed\x85\xa3\x63\x2b\xb1\xc1\x6b\x2f\xb6\xb7\x25\x2c\xf9\xef\xc8\x76\x92\x49\x20\x53\xe8\xa1\xd1\xca\xd2\x93\xfc\xa4\xe7\x69\x52\xb8\x32\x0e\x81\x2d\xbc\x4b\x42\x26\xb6\xdd\xce\xda\x8b\x9b\xbb\xc5\xe3\xe7\xfb\x5b\xd0\xa9\xb7\x7c\xd6\xae\x7c\xe8\xc1\xa8\x8e\xc9\x1a\x74\x99\x1d\x0c\xc8\x32\xde\x75\xac\x99\xa6\xf9\x07\xdc\x6c\xb7\x4d\x44\xa7\x18\xf4\x98\xb4\xa7\xe8\xfb\xbb\x87\x47\xc6\x67\x40\x7f\xad\x71\xc3\x98\x20\x6d\x06\xec\x58\xc2\xef\x89\x81\x13\x3d\xd9\xd8\x0b\x63\x19\x0c\x56\x48\xd4\xde\x2a\x0c\x07\x5f\xc0\x6f\xa3\x09\xa8\x1a\xde\x2e\x43\xf3\x17\x9c\x38\x2e\xbf\x20\xb5\x7f\x8a\xb4\xf7\xfe\x13\x44\x8f\x31\x8a\x35\xfe\x06\x71\xf0\x9e\x6b\x67\x9a\x60\x2e\x63\x58\xbd\x33\x68\x15\x10\x75\xb3\x5a\x62\xe0\xad\xe9\xd7\x99\x32\xd3\x53\x32\xc4\x20\x89\x26\x29\x86\x24\xb5\xc8\x74\x2d\xaa\xf9\x5e\x6d\xb7\xf3\xc1\xad\x89\x4b\x9b\x3a\xb6\xf3\x42\x49\x62\xbc\x6d\x06\xbe\x03\x14\xa0\x03\xae\x3a\xf6\x3f\x03\xef\xa4\x35\xf2\x6b\xc7\x02\x5a\x2f\xd4\xab\xd7\x8c\x7f\x2a\x16\x2c\xbc\xc2\xb6\x11\x1c\x7e\x9e\x4f\xa0\x7b\x6d\xde\x8e\xca\xf8\x9c\x73\x4f\x1f\x50\xbe\x72\x4a\xad\xb2\x0c\x87\x7a\xf9\x20\xf7\x5f\x8d\x3c\xf7\xe0\x6d\x84\x98\x36\x96\xa8\x52\x26\x66\xb0\x2b\xe7\x1d\x5e\x67\x0e\x2f\x85\x35\x6b\x77\x25\xd1\x25\x0c\xd7\xec\xe5\x0b\x3f\x8b\x27\x22\xb9\xb6\xdf\x65\x88\x5a\x1e\xe0\xc6\x63\x84\x8d\x1f\x03\x2c\x83\x7f\x8e\x18\xf2\x28\x36\x50\x7a\x78\xb3\x8b\x39\xdc\xec\x80\xae\xfc\xb3\xcb\x50\xe7\xca\xf0\x9b\xdd\x21\xac\x8c\xad\xe4\x24\x5f\x51\x4d\x02\xe3\x20\x69\x04\xea\x1f\x83\x13\xb6\xf8\x31\xcc\x2b\x05\x4d\x29\xbb\x63\x26\xa2\xa5\x3d\x2a\x1a\xb0\x22\xcf\x8b\x48\xd5\x64\x10\x17\xf5\xf7\x23\xfd\xcb\xb4\x96\xf0\xff\x5a\x3f\x64\x69\xc0\x93\xb0\x63\x5e\x72\xc7\xf8\xad\x5b\x5b\x13\x75\xdb\xd4\xa3\xf3\x81\x61\xa4\x61\x8e\x31\x1a\xe1\x5e\x0e\xfc\xa1\x19\x5f\x68\x12\x6e\xc4\xd3\xc0\xb6\xa9\xad\xfe\xb9\xeb\xda\x28\x85\xae\xee\xba\xdc\xd3\xb4\xc7\x3b\xa5\x8e\xf1\xb2\x0a\x47\x08\xc7\x59\x0f\xde\x8e\xa5\x97\x13\x9d\xdc\xe6\xc9\x17\x3a\x25\xad\x61\x61\x39\x78\x89\xa8\xd8\x7e\xa7\x2a\xd2\xf1\x33\x42\xf2\xec\x0d\xe9\xaf\x6a\x71\xff\xb5\x6b\xe9\x81\x66\xa4\xd1\x5a\x7f\xc1\x80\xe4\xd6\x36\xf9\xd1\xe1\xb3\x69\xa2\x37\x86\x94\xf6\x2b\x00\x00\xff\xff\x46\x9d\x4b\x42\xba\x04\x00\x00")

func templatesFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormHtml,
		"templates/form.html",
	)
}

func templatesFormHtml() (*asset, error) {
	bytes, err := templatesFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/form.html", size: 1210, mode: os.FileMode(493), modTime: time.Unix(1465284476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x6d\x73\xdb\x36\x0c\xfe\xee\x5f\x81\x70\x1f\x6c\x77\x89\xd4\xf6\xa3\x5f\xd4\x6d\x6d\x76\xeb\xed\xa5\xd9\x92\xed\xae\xb7\xdb\xed\x68\x09\xb6\xd8\x50\xa4\x4a\x52\x71\x7c\x9e\xff\xfb\x00\x52\x4a\x9c\xf4\x65\xdd\x5d\xe3\x52\x20\x01\x3c\xc0\x03\x80\xdc\xef\x2b\x5c\x2b\x83\x20\x5e\x9b\x0a\x6f\xc5\xe1\x30\x5a\x9c\xbc\x7a\xf3\xf2\xea\xed\xc5\x39\xd4\xa1\xd1\x05\x7d\x9f\x9d\x8d\xae\x6a\xf4\x08\x01\x9b\x56\xcb\x80\x50\xda\xa6\x41\x13\x3c\x54\xd6\x8c\x03\xf8\xda\x6e\xa1\x6b\x41\x19\x08\x35\x82\x47\x77\x83\x15\xb4\x72\x83\xd9\xe8\xec\x8c\x4c\xf4\x96\x6a\x94\x55\x31\x02\x58\x68\x65\xae\xc1\xa1\x5e\x0a\x52\x75\xa1\xec\x02\xa8\xd2\x1a\x01\xb5\xc3\xf5\x52\xe4\x6b\x79\xc3\xdf\x19\xfd\x08\x08\xbb\x16\x97\x42\x35\x64\x2e\xbf\x3d\x8b\xe7\x1e\x19\xf9\x9f\xba\x8b\x3c\x01\x59\xac\x6c\xb5\x03\x1f\x76\x9a\xce\x04\xbc\x0d\x67\x52\xab\x8d\x99\x95\x14\x1a\xba\x39\x34\xd2\x6d\x94\x99\xc1\xb3\xa7\xed\xed\x3c\xf9\xac\x9f\x15\xa5\xf5\x1b\x4b\x26\x9e\x25\xc1\x73\x12\x98\x20\xcb\x00\x6b\xeb\x9a\x14\xbb\xa3\xed\xe7\x64\x5f\x82\x91\x0d\xd9\xee\x4f\x88\x62\x91\xcb\x62\x34\xda\xef\xd5\x1a\xb2\xcb\x20\x43\xe7\xe1\x70\x58\xb4\x03\x86\xd2\x6a\xeb\x66\xd0\x76\xae\xd5\x48\x1e\xf7\xfb\xfe\x14\x1d\xca\x5b\xfa\x44\x53\x31\x43\xd1\x93\xaa\xee\x0c\x9f\xb1\x40\x00\xad\x94\x35\x94\x02\xd2\xfb\x11\x77\x87\x43\xee\x49\x41\x40\x83\xa1\xb6\x74\xfa\xe2\xcd\xe5\x55\x0c\x83\x93\x27\x57\xa8\x8b\xf3\x46\x2a\x3d\x83\x85\x32\x2d\x51\x90\x92\xc5\x89\x10\x3d\x70\xe4\x7d\x01\x44\x7a\x89\xb5\xd5\x15\xba\xa5\xd8\xd9\xee\x1b\xfa\x73\x3e\xa3\x2a\x10\x44\xc0\xfb\x4e\x39\xac\x72\x0a\x2e\x19\x5d\xac\x5c\xfe\xc0\xcb\x65\xb7\x7a\x87\x65\xf8\x8c\x1f\x9f\x4e\x3c\xf2\xb4\xad\x65\x00\x49\xc5\x66\x35\x1c\x27\x59\x7c\xc6\xd7\xcf\xe8\x3d\x91\x4d\xbe\xd8\xbe\x74\x38\x70\xd0\xa4\x8d\x47\x2e\x14\x74\x9e\xcb\x99\x28\x3d\xa1\xda\x95\xe6\xda\x9f\x3c\x8c\x69\x30\xf3\x11\x97\xfb\x3d\x64\xa5\x77\xeb\xef\x15\xea\x8a\x88\x1c\x8d\x12\x92\xb6\x58\xa8\x66\x13\x09\x8a\x95\x27\xc0\xbb\x92\x68\x29\x65\x1b\xca\x5a\x32\x3d\x2f\xd3\xf2\x35\xd1\x99\xb5\x66\x43\xdc\xe9\xb0\x14\xbd\x14\x92\x56\xc1\x9c\xf7\x26\x65\x5f\xdd\x5f\x0d\xa5\x04\xd6\x94\x5a\x95\xd7\x4b\x41\x1d\x60\x65\x35\x99\x8a\xe2\xb7\xb8\x82\x97\xb6\x42\x2e\x34\xf8\xe7\x48\xef\x48\x81\x12\xb0\xfb\xb6\xab\x94\x65\x9d\x0b\xfa\x80\xf8\x15\x6b\x33\x3a\x5b\xb9\x3b\xb7\xbc\x11\x03\x89\x2b\x11\x69\x70\x56\xfb\xa1\x62\x2b\xe5\xd9\xdc\xcc\x58\x83\xf3\x0f\x5b\xe8\x3f\x22\xdf\xca\x1b\xe2\x23\x05\xb0\x64\x13\x09\x00\xc0\x5b\xdb\x01\x25\x9d\xc8\x51\x66\x43\x25\x10\x2d\xaf\xa4\xa7\xa9\xb2\x72\x76\x4b\x4d\x96\x01\x8d\x24\x48\xf8\x7a\xeb\xb0\x55\x5a\x83\xb1\x81\x29\xde\x41\x8d\x8e\xc6\x4f\xb2\x77\x97\x87\x3b\x24\x95\xdd\x1a\x76\xfb\x31\x48\xc5\xab\x7e\x13\xd6\x4a\xa7\x54\x06\x9b\x8c\xaa\x30\x0c\x39\x42\x84\xce\x48\x1d\xe5\x84\x27\x25\x2c\x8f\x88\xfa\x3c\x1e\x55\x7b\xad\xaa\x0a\x4d\x2a\xc5\x72\x70\x07\x37\x52\x77\x94\xc4\x87\x10\x04\xe4\x45\xa4\xe0\xc8\xc6\xb1\xde\xa5\xd5\x1d\xf7\xf9\xc3\x42\x3e\xe7\x7c\x47\x60\x25\xd1\x1f\xf1\x3a\x5b\x22\x56\x6c\x6e\x74\x6c\xeb\x78\x6e\x50\xdf\x35\x2a\x0c\x63\x72\xf8\xea\x61\x5d\xc6\x24\x6a\x6d\x4f\xa2\x8d\x45\xce\xbd\x57\xf4\xd3\xeb\x82\x2a\x94\xc7\x52\x5b\xfc\x42\xb3\x7f\xab\x42\x3d\xe3\x2c\x53\xab\x6c\x90\x2a\xf9\xef\x96\xe8\x33\x61\x18\xca\x14\x21\x2b\x5c\xc8\x50\xd3\x54\xaa\xb0\xb1\x19\x5f\x09\xa2\x28\x3b\x1f\x6c\x13\xaf\x0a\x7f\xc2\x99\x3e\x9e\x73\xf1\xea\x89\xb5\x40\xb1\xac\xe4\x4a\xef\xfa\xfb\x66\x2b\x4d\xe0\x10\xfb\xea\x03\x1e\x47\xa9\x89\x81\x86\xaf\xe7\xe4\xd0\xbf\x27\x2c\x7e\x42\x7c\xf9\x20\x4d\x89\x19\xf0\x55\x94\xd0\xff\x91\x4e\x45\xfc\x49\x8f\x10\xde\x0b\x1f\x60\xa0\xfa\xfc\xc8\x1d\x01\x1a\xd7\x61\x0e\xad\xf5\x8a\xc9\x98\x81\x5c\x79\x26\x06\xe7\xb0\xb2\x81\x62\x9a\x01\xdf\x1a\xf1\xd8\xfd\x0d\x12\x54\x43\xa3\x89\x7c\x51\xd2\xc8\x78\xd7\xde\x09\x7e\x8f\x4b\x92\x95\xb6\x63\x2a\xa3\xf0\x07\x15\x3c\xcf\xfb\x9c\x30\x14\x9f\x86\xe2\xd4\xa6\xfe\x12\x2c\xf1\xdc\x3d\x98\xbb\xa6\xa8\x43\x68\xfd\x2c\xcf\x37\xc4\x62\xb7\xe2\xb1\x9e\x4b\x74\xa1\xce\x63\x6a\x44\x71\x49\x79\x2c\xf1\x6e\xae\x0c\x78\x16\xbe\x74\xaa\x0d\x45\xcf\x13\x65\x9b\x3a\xd1\xd0\xf0\x6c\xec\x0d\xb5\x26\xf5\x62\xa8\x95\x87\x77\xf2\x46\xa6\x93\x40\xa9\xe7\x53\x86\xca\xf2\x94\x5a\xc9\xf3\x34\x87\xd4\xfe\xb1\xcf\x4d\x15\xbb\x29\xae\x63\x67\xb3\x84\x4a\xde\x6c\x58\xa4\xe9\xff\x8e\xdf\x14\x91\xc8\x75\x67\xe2\x75\x47\x37\x6e\xb8\x74\xe5\xaf\x1d\xba\xdd\x04\x4f\xe1\xfd\x14\xf6\x54\xee\x37\xd2\xf1\xec\x01\x58\x02\x66\xb4\x98\xf7\xb2\x96\x04\xf4\x99\x29\x7e\xee\xbc\x59\x4f\xc6\x2f\xc6\x53\xde\x23\x68\x93\x16\x8a\x25\x3c\x4d\xfa\x10\xb5\xd3\x59\xea\x0b\x1f\xdc\xe4\xe9\x29\xb4\xf1\xec\x81\xfe\xa2\xd1\xb4\x0f\x5f\x83\x78\x21\xe8\xf7\xfd\xe8\x70\x0f\xeb\x68\xca\x46\x83\x79\xce\xee\x35\x92\x8e\x40\x23\xe6\xf7\x22\x0a\x8b\x84\x1a\x33\xdb\xb2\xa6\xff\x93\x96\x1e\x35\xdd\x87\x58\xc5\x57\xd9\x5f\x59\xec\xc8\x21\x04\x36\x51\xd9\xb2\xe3\x17\x58\x46\xdd\x76\xae\x91\x97\xdf\xed\x5e\x57\x93\x71\xcc\xdb\x78\x1a\xad\x3f\xca\x8c\x60\x4f\x4b\x06\xca\x8b\x69\x0a\x82\xab\x29\x1b\xfa\x68\x09\x63\x65\xe8\x59\x85\xe3\x79\xdc\x95\x5d\xb0\xc3\x46\x70\x5d\x12\x3b\x0c\x9d\x33\xb0\x96\xda\x13\xa4\xa3\x88\x23\x51\xf8\x13\xfd\x4c\xee\x39\xf8\x42\xb0\x9c\xfe\x0f\xd0\x90\xd7\x95\xb6\xe5\xf5\x78\xa0\xe4\x28\xa7\x89\x87\x23\xef\xc3\x35\x18\x8f\x1e\x47\xfe\x49\xef\xf1\x96\x1d\x4f\x29\x31\xfd\x0d\xc4\xa9\x99\x18\xdc\xc2\x2b\x7a\xe3\x4e\xa6\x53\xd6\xb8\xa2\xae\xa4\xe5\xfc\x4b\x8d\xf6\x21\x9d\x7e\xce\xd0\xe3\x0c\x2e\xf2\xfb\x4e\xca\xf9\x4d\x1a\x9f\xa8\xf1\xc9\x3c\x8c\xa1\x7f\x03\x00\x00\xff\xff\x2a\xe9\xa3\x34\xa8\x0b\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2984, mode: os.FileMode(493), modTime: time.Unix(1465285662, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico":     staticFaviconIco,
	"static/favicon.ico.gif": staticFaviconIcoGif,
	"templates/error.html":   templatesErrorHtml,
	"templates/form.html":    templatesFormHtml,
	"templates/index.html":   templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico":     &bintree{staticFaviconIco, map[string]*bintree{}},
		"favicon.ico.gif": &bintree{staticFaviconIcoGif, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"error.html": &bintree{templatesErrorHtml, map[string]*bintree{}},
		"form.html":  &bintree{templatesFormHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
