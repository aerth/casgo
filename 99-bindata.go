// Code generated by go-bindata.
// sources:
// static/favicon.ico
// static/favicon.ico.gif
// templates/error.html
// templates/form.html
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x02\x20\xcc\xc1\x06\x24\xe5\x3f\xff\x4f\x04\x52\x6c\x49\xde\xee\x2e\x0c\x60\xf0\xd3\x79\x77\x3d\x90\x4a\xf6\x74\x71\x0c\xb1\x38\x9d\x9c\xb0\x40\xc0\x60\xd1\xc7\xff\x93\x57\xf1\xdf\x6c\xf8\xbf\xf4\xd6\x91\x97\xef\xf6\x75\x5d\x38\xdd\xe1\x5d\x7c\x5d\xf4\x4d\x9f\xe6\xe5\x44\x17\xc3\x16\xce\xd9\x4a\x31\xb3\x36\x32\x8a\x39\xcd\x4a\x34\x7b\xc4\xe4\xf3\x43\x85\x33\x53\x2d\x83\xc1\x30\x61\x82\xb4\x83\x4f\x4e\x82\x2f\xfb\x0f\x13\xa1\xa9\x7c\x1d\x9c\xb5\x25\xe2\x09\x3b\x98\xe4\x0f\x4c\x9b\xf2\xb0\x6d\x42\xa2\x61\x2a\x03\x83\xe5\x4c\x59\x49\xfb\xdd\xd5\x5a\x20\x6b\x3d\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\xbf\xbc\x68\x98\xae\x00\x00\x00")

func staticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIco,
		"static/favicon.ico",
	)
}

func staticFaviconIco() (*asset, error) {
	bytes, err := staticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico", size: 174, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFaviconIcoGif = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\xcd\x6e\xd4\x30\x10\xc7\x27\x8e\x57\x0a\x70\x19\x71\xe2\x98\xde\x11\xaa\x38\x81\xb8\x18\xa1\x82\xb8\x20\x24\x78\x01\xde\x24\xf0\xb2\x48\x1c\xb9\xd1\x4b\xc8\xe6\xc3\x33\x76\xd3\xc4\xd9\x3a\x6a\xfc\x11\x6d\x55\x4f\xff\x99\xb1\xff\xbf\x38\x8e\x62\x75\x3f\x7d\xfe\xf8\xe6\xed\x0f\x04\x84\xbf\x12\xca\xb2\x3c\x9d\x4e\xb7\xed\x6d\xdb\xb6\xc0\x8e\xab\x7f\xf2\xc9\x09\x24\x5c\xb5\xcf\xbe\xdc\x7c\xff\xf6\xe1\xfd\xd7\x9b\xd7\xaf\xae\xcb\xa2\x93\x5e\x9e\xf5\x73\x3a\x94\x7f\x5e\x74\x4d\xd1\xfd\x54\x92\x52\x87\xa6\x60\x6d\x43\x18\x15\x53\x02\xd9\x90\x56\x75\x91\x22\x49\x74\xa7\x0a\x96\x29\xac\x54\x2a\x25\x60\xae\xf4\x05\x7a\x61\xc8\x0d\xc8\xe7\x44\x64\x2f\xfb\x35\x30\xfb\x4c\x4a\xc4\xfe\xb9\x62\x62\xf6\x2b\xad\x35\xa4\xa5\x63\x5f\x9f\x90\xa8\x7d\xad\x35\xa4\x45\x6e\xbf\x98\x19\x43\xd4\xf6\x1b\x1e\xcc\x5c\xfd\x6a\x8b\x7d\x0f\xf6\xd6\x74\xdf\x57\x5f\xb1\x60\xb2\xc8\x3a\x58\xb4\x0f\x81\xda\x17\x46\x47\x95\xb3\x7d\x88\xc3\x7e\x53\xbb\xda\x87\x50\xed\x17\x96\x7d\xc1\x27\x7f\xfc\xf6\xfb\xa4\xe2\x9e\x7b\x3f\x11\xfb\xfa\xea\xd7\x54\x2c\x45\xfb\xac\xd8\x2f\x88\xd2\x7e\x49\xf6\x7f\x76\x6f\xcb\xfa\x55\x59\xfc\x96\xfd\x4b\x4b\x07\x45\xe7\x5d\xc3\x70\x6a\x77\x14\xac\x2d\xa7\x53\x0a\x23\x1a\x8f\x52\x91\xa6\x23\x5d\x10\xa9\x8c\xee\x00\xac\x0e\xf7\xd3\xa1\x7c\xea\x87\x43\x7f\x4c\xce\x45\xe6\x30\x34\x38\x07\x3d\x45\x13\xe7\x40\x5d\xa9\xfe\x15\x39\x73\x50\xa4\xf5\x11\xf2\x71\x26\xc4\x81\x69\x33\xf3\x01\xcd\x71\xa2\x57\x9f\x01\x71\xe8\xcb\x65\x0e\x08\xe3\x87\x62\x8f\x3e\x83\xe2\x30\xce\x09\x8a\xfd\xf9\xdc\x9f\x03\x38\x72\x90\x0e\x1c\xc6\x45\x02\x42\xe7\x00\xce\x1c\xe4\xea\x73\x33\x1e\x0e\xe0\xcc\x01\x89\x03\x4e\x1d\xc4\xca\xe1\xce\x5c\x51\xa4\x30\x0e\xe3\x3a\x91\x39\x0c\x9f\xcc\x61\x18\x41\xe6\x00\xfd\x22\x91\x39\x98\xf1\xf4\xb7\xcc\xe1\x8e\x0f\xbc\xc4\x67\x84\x1c\xac\x4e\xd1\xc9\x67\xfc\x1c\x2c\x1d\x57\xf4\x7b\xf2\xa3\xe3\xb0\x31\xa6\xc1\xc5\xcd\xc1\xd2\x31\x73\x98\xd3\x59\x1f\x8f\xc7\x81\x29\x2e\x1c\xf0\x02\x9f\x96\x8e\x87\xbc\x2f\x98\x82\x96\x0f\x17\x0e\xeb\xf3\x05\x57\x74\x73\x70\x47\xe5\x00\x96\xcf\x35\x0e\xf6\xfe\xa6\x9d\x0f\xb0\xa4\x87\xcc\x01\x17\x75\x3b\x1f\x16\xf5\x90\x39\x70\x10\xf1\x72\x98\x5b\x1f\xf6\xdb\xbf\x0c\x8b\xc3\x7e\xfb\x97\xc7\xe1\x30\xff\xdc\xb4\x7d\x3f\xe8\xb9\xb9\xa0\x1f\x9d\xc3\xf4\x2b\x62\x0e\x8a\x94\x74\xf7\x27\x61\xd3\xfe\xa4\xbd\x7e\xc4\xc9\x01\x97\xee\x0b\x1d\x3f\xcc\x67\x08\x1c\xf8\x7e\x64\x6a\x1c\xe4\xa6\xf9\x10\xef\xfa\xc0\x38\xd4\x8b\xcf\x0b\x4f\x3e\x8f\xcf\x41\x41\xe6\x00\xe3\x17\x0e\x32\x87\x21\xca\x1c\xc4\x58\x28\x71\x0e\x72\x1a\x5d\xda\x1c\x2a\x3d\xba\xa4\x38\x28\xd2\xa4\xf1\xff\x93\x73\x1c\xfc\xfa\x3c\x32\x87\x5a\x2b\x07\xe1\xf0\xee\x7f\x00\x00\x00\xff\xff\x5f\xeb\x2e\xfd\x9a\x3e\x00\x00")

func staticFaviconIcoGifBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIcoGif,
		"static/favicon.ico.gif",
	)
}

func staticFaviconIcoGif() (*asset, error) {
	bytes, err := staticFaviconIcoGifBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico.gif", size: 16026, mode: os.FileMode(493), modTime: time.Unix(1465284480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x72\x2d\x2a\xca\x2f\x52\xaa\xad\xe5\xf2\xc8\x2f\x2d\x2e\xc9\xcf\xb3\x52\x08\x4f\x55\xc8\x48\x2c\x4b\x55\x48\x54\xa8\xae\xd6\x4b\x2d\x2a\xaa\xad\x55\x28\x28\xca\x4f\xca\x49\xcd\xd5\xe3\xaa\xae\x4e\xcd\x4b\x01\x2a\x06\x04\x00\x00\xff\xff\xff\x28\x67\x2e\x40\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 64, mode: os.FileMode(493), modTime: time.Unix(1465284476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFormHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x73\x13\x3d\x0c\x3d\x7f\xf9\x15\xaa\xbf\x0b\x1c\x9a\xbd\xb7\xbb\x66\x98\xb4\xcc\x30\x30\xd3\x0e\xed\x85\xa3\x63\x2b\xb1\xc1\x6b\x2f\xb6\xb7\x25\x2c\xf9\xef\xc8\x76\x92\x49\x20\x53\xe8\xa1\xd1\xca\xd2\x93\xfc\xa4\xe7\x69\x52\xb8\x32\x0e\x81\x2d\xbc\x4b\x42\x26\xb6\xdd\xce\xda\x8b\x9b\xbb\xc5\xe3\xe7\xfb\x5b\xd0\xa9\xb7\x7c\xd6\xae\x7c\xe8\xc1\xa8\x8e\xc9\x1a\x74\x99\x1d\x0c\xc8\x32\xde\x75\xac\x99\xa6\xf9\x07\xdc\x6c\xb7\x4d\x44\xa7\x18\xf4\x98\xb4\xa7\xe8\xfb\xbb\x87\x47\xc6\x67\x40\x7f\xad\x71\xc3\x98\x20\x6d\x06\xec\x58\xc2\xef\x89\x81\x13\x3d\xd9\xd8\x0b\x63\x19\x0c\x56\x48\xd4\xde\x2a\x0c\x07\x5f\xc0\x6f\xa3\x09\xa8\x1a\xde\x2e\x43\xf3\x17\x9c\x38\x2e\xbf\x20\xb5\x7f\x8a\xb4\xf7\xfe\x13\x44\x8f\x31\x8a\x35\xfe\x06\x71\xf0\x9e\x6b\x67\x9a\x60\x2e\x63\x58\xbd\x33\x68\x15\x10\x75\xb3\x5a\x62\xe0\xad\xe9\xd7\x99\x32\xd3\x53\x32\xc4\x20\x89\x26\x29\x86\x24\xb5\xc8\x74\x2d\xaa\xf9\x5e\x6d\xb7\xf3\xc1\xad\x89\x4b\x9b\x3a\xb6\xf3\x42\x49\x62\xbc\x6d\x06\xbe\x03\x14\xa0\x03\xae\x3a\xf6\x3f\x03\xef\xa4\x35\xf2\x6b\xc7\x02\x5a\x2f\xd4\xab\xd7\x8c\x7f\x2a\x16\x2c\xbc\xc2\xb6\x11\x1c\x7e\x9e\x4f\xa0\x7b\x6d\xde\x8e\xca\xf8\x9c\x73\x4f\x1f\x50\xbe\x72\x4a\xad\xb2\x0c\x87\x7a\xf9\x20\xf7\x5f\x8d\x3c\xf7\xe0\x6d\x84\x98\x36\x96\xa8\x52\x26\x66\xb0\x2b\xe7\x1d\x5e\x67\x0e\x2f\x85\x35\x6b\x77\x25\xd1\x25\x0c\xd7\xec\xe5\x0b\x3f\x8b\x27\x22\xb9\xb6\xdf\x65\x88\x5a\x1e\xe0\xc6\x63\x84\x8d\x1f\x03\x2c\x83\x7f\x8e\x18\xf2\x28\x36\x50\x7a\x78\xb3\x8b\x39\xdc\xec\x80\xae\xfc\xb3\xcb\x50\xe7\xca\xf0\x9b\xdd\x21\xac\x8c\xad\xe4\x24\x5f\x51\x4d\x02\xe3\x20\x69\x04\xea\x1f\x83\x13\xb6\xf8\x31\xcc\x2b\x05\x4d\x29\xbb\x63\x26\xa2\xa5\x3d\x2a\x1a\xb0\x22\xcf\x8b\x48\xd5\x64\x10\x17\xf5\xf7\x23\xfd\xcb\xb4\x96\xf0\xff\x5a\x3f\x64\x69\xc0\x93\xb0\x63\x5e\x72\xc7\xf8\xad\x5b\x5b\x13\x75\xdb\xd4\xa3\xf3\x81\x61\xa4\x61\x8e\x31\x1a\xe1\x5e\x0e\xfc\xa1\x19\x5f\x68\x12\x6e\xc4\xd3\xc0\xb6\xa9\xad\xfe\xb9\xeb\xda\x28\x85\xae\xee\xba\xdc\xd3\xb4\xc7\x3b\xa5\x8e\xf1\xb2\x0a\x47\x08\xc7\x59\x0f\xde\x8e\xa5\x97\x13\x9d\xdc\xe6\xc9\x17\x3a\x25\xad\x61\x61\x39\x78\x89\xa8\xd8\x7e\xa7\x2a\xd2\xf1\x33\x42\xf2\xec\x0d\xe9\xaf\x6a\x71\xff\xb5\x6b\xe9\x81\x66\xa4\xd1\x5a\x7f\xc1\x80\xe4\xd6\x36\xf9\xd1\xe1\xb3\x69\xa2\x37\x86\x94\xf6\x2b\x00\x00\xff\xff\x46\x9d\x4b\x42\xba\x04\x00\x00")

func templatesFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormHtml,
		"templates/form.html",
	)
}

func templatesFormHtml() (*asset, error) {
	bytes, err := templatesFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/form.html", size: 1210, mode: os.FileMode(493), modTime: time.Unix(1465284476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x6d\x6f\xdc\xb8\x11\xfe\x9c\xfd\x15\x13\x15\x07\xdb\x57\x5b\x4a\xae\x5f\x0a\x7b\x57\x69\x2e\x2f\x97\xa0\x2d\xe2\xd6\x46\x81\xa0\xe8\x07\x4a\xe2\xae\x78\x96\x44\x85\xa4\xbc\xde\xba\xfb\xdf\xfb\xcc\x50\xb2\x65\x3b\x77\x97\x03\x1c\x9b\x22\x39\xef\x33\xcf\x0c\x73\x7b\x5b\xe9\xb5\xe9\x34\x25\x1f\xbb\x4a\xdf\x24\xfb\xfd\x62\xf9\xfc\xed\xa7\x37\x97\x9f\xcf\xdf\x51\x1d\xda\x26\xc7\xf7\xc9\xc9\x62\x71\x59\x6b\xaf\x29\xe8\xb6\x6f\x54\xd0\x54\xda\xb6\xd5\x5d\xf0\x54\xd9\xee\x20\x90\xaf\xed\x96\x86\x9e\x4c\x47\xa1\xd6\xe4\xb5\xbb\xd6\x15\xf5\x6a\xa3\x53\x02\xe5\x8e\x94\xd3\xb4\xb6\x8e\x76\x76\x38\x96\x2b\x5b\x5d\x90\x37\xe0\x64\xb7\x9d\x76\x29\x2d\x3e\xdb\x81\xd9\x0c\x4d\x05\xe6\xfd\x0e\x97\x8c\xa7\xb5\x69\x20\xd4\x12\x94\x54\x43\x13\x52\xd6\x48\xf8\x38\xbd\xd6\x4e\x77\x25\xf8\x7f\x50\xd7\xe0\x3d\x88\xe4\xd6\x74\x1b\x96\xe1\xa8\xd3\xdb\x3b\x19\xcf\x17\x8b\x93\x13\x18\x32\xda\x53\x6b\x55\xe5\x0b\x22\xfc\xb0\x6d\x94\x66\x3e\xa8\x60\xca\x6c\xad\xae\x4d\x69\xbb\x14\xbf\x68\xa3\x61\xdc\x68\x87\xf2\x34\x3f\x3b\x26\xaf\x5a\xcd\xbb\xce\x16\x36\xf8\x34\xdc\x04\x62\x01\xe0\xd7\x98\xee\x0a\xca\x35\xab\x04\xb6\xb8\x50\x0e\x81\x98\x2c\xa1\x1a\x1a\xaf\x92\x39\x9b\x84\xc2\xae\xd7\xab\xc4\xb4\x70\x53\x76\x73\x22\xf7\x1e\x31\xf9\xdd\xb4\xf8\xa1\xa5\x0f\xbb\x46\xe7\x8b\x67\xcf\x14\xdd\xe2\xf7\xb3\xa0\x6f\xc2\x49\xa5\x4b\xeb\x60\xa6\xed\x4e\xa9\xb3\x9d\x3e\xe3\x93\xd2\x36\xd6\x9d\xd2\xc6\xe9\x1d\x7f\xef\xf1\xaf\x51\x85\x6e\x84\x6c\x6d\xbb\x70\xe2\xcd\x7f\xf5\x29\xfd\xf9\xc5\x77\xd3\x79\xef\x74\x8a\x08\x84\xa1\xd3\xb7\x33\x16\x8d\xd9\xd4\x61\xe2\x33\x27\x6d\x94\xdb\x68\x27\xbb\xad\xba\x39\xa9\x35\x5f\x3c\xa5\x3f\xbd\x78\xd1\xdf\xc8\xae\xbd\xd6\x6e\xdd\xd8\xed\x29\xa9\x21\x58\xde\x12\x49\xcb\x6c\x34\x63\x99\xc5\x80\x2d\x96\x85\xad\x76\x24\xbb\xab\x44\x6c\x52\x90\xda\x9d\x96\x48\x44\x48\xa0\x16\x92\x0c\xac\x7b\xc9\x9c\x27\x6f\x2c\xeb\x97\x39\x2d\xd5\x44\x36\x37\x98\xbe\xee\x97\xc9\xdf\x75\x08\xbd\x3f\xcd\xb2\x8d\x09\xf5\x50\xa4\xc8\xf8\x4c\x69\x17\xea\xac\xb4\x7e\x63\x93\x5c\xfe\x2c\x33\x95\x43\xc1\x97\x12\xb7\xfa\x87\xaf\x89\xe1\x9b\x5d\x50\x65\xe0\xc4\x6d\x63\x4e\x39\xd0\xfc\x00\x93\xa6\x14\xbc\xd2\xba\x8f\x19\xdf\x69\xe5\x62\x06\xcb\x6d\xa4\x15\x6b\xdf\x21\xe1\x98\xab\xf0\x49\x72\x96\xba\x90\xc2\xa4\xca\x78\x54\x24\xbb\x45\x85\xc1\x93\x59\x93\xbe\x31\x1e\xb9\x0b\xca\xdb\x5b\x7c\xa6\x17\xf1\x64\xbf\x5f\xf6\x8f\xd4\xeb\x07\xd7\x37\x30\x18\x17\xc7\x5b\xb8\x94\xf5\xf9\x42\x08\xf5\x97\x3b\xda\xe4\xb2\x56\xdd\x95\x7f\x4e\x9f\x59\xb1\x56\x7b\x8f\xb4\xa3\xad\xe2\x0a\xe9\x42\x0a\xd4\x78\xec\xe1\xa2\x19\xee\x3d\x99\x25\xf9\x3f\x75\x18\x5c\xc7\x7a\xdf\xde\xea\xc6\x6b\xd6\x26\xbf\x74\x3b\x36\xee\xee\x92\xda\x28\x23\x77\x5e\xb1\x16\xb8\xd8\x55\xc0\xa3\x89\x20\xda\x0b\xc5\x3a\x3b\x5a\x7b\x1c\x71\x47\x1c\xa5\xba\x8a\xc6\xb4\x94\x5a\x5c\x2c\x65\xdb\x54\x77\x6e\x3b\xe1\x8d\x84\xb0\x42\xac\x21\x0f\x46\xff\x55\xef\xf6\xfb\x0c\x36\x54\x09\xac\x0a\xb5\xc5\xed\xf3\x4f\x17\x97\x92\x3c\x5c\x88\x5c\x0b\xf9\xbb\x56\x99\xe6\x94\x96\xa6\xeb\x51\xce\xb1\xf0\x38\x75\x92\x31\x2c\x9a\xcf\x13\x42\x18\x4a\x5d\xdb\xa6\xd2\x6e\x95\x20\x82\x7f\xe1\x28\x7a\xce\x9b\x04\xc5\xfc\x65\x30\x4e\x57\x19\x42\x17\x99\x2e\x0b\x97\xe5\x53\xf8\xfd\x50\xfc\xac\x91\x20\x88\xbf\xed\x59\x3d\xd5\x1c\xc7\x74\x68\x18\x9b\x4b\xd5\x51\xa1\xc1\xa4\x45\xad\x54\xa9\x24\xc5\xa4\xdc\x45\x24\xfd\x15\xf5\x46\xe6\x8f\x14\xdc\xd6\x2a\x90\x02\xd4\xda\x86\xe6\xf9\x99\x3c\x55\xf1\x4e\xd6\xdf\x63\xe0\x21\x8b\xf9\x03\xd2\xa7\xc4\x1c\x33\xe2\x91\x08\x43\x83\xe7\x4e\x81\x32\x79\x0e\x6b\x24\x83\x1e\xba\x62\x62\xf3\x15\x91\xb7\xb7\x94\x96\xde\xad\xdf\x1b\x8d\x8e\x80\xe8\x2f\xa2\x26\x7d\xbe\x34\xed\x46\xe2\x2a\xe0\x97\x90\x77\x25\xa2\x59\xaa\x3e\x94\xb5\xe2\xa8\xbe\x89\xcb\x8f\x48\x9e\xb4\xef\x36\x08\x79\x13\x56\xc9\xb8\x4b\x91\x2a\x97\x3c\x8f\x2c\xa7\x0c\xfc\xc3\x54\x5f\x64\xbb\xb2\x31\xe5\xd5\x2a\x01\x08\x5b\x55\x1d\x1e\x71\x02\xf3\x8a\xde\xd8\x4a\x73\x86\xd2\xff\x66\x74\x33\x02\xae\xc5\xd7\x43\x65\x2c\xd3\x9c\x73\x61\xca\x97\x14\xac\x08\x2b\xdc\x9d\x58\x3e\x10\x43\x64\x95\x48\x18\x9c\x6d\xfc\x54\x49\x63\x69\x9f\x0a\x2a\x3d\xc5\xbb\xdf\xb0\x7c\xab\xae\x11\x8f\x68\xc0\x8a\x59\x44\x05\x88\x6b\x58\xda\xf1\xe0\xb9\x59\xaa\x88\x82\x85\xf2\x68\x74\x85\xb3\x5b\xcf\xdd\x18\x3d\x9b\xa2\x7e\x23\x77\xda\x9a\xa6\x41\xe5\x05\x12\xb4\xa9\xd1\x7c\xd3\x91\xdf\x7d\x05\x4f\x9a\x54\xe8\xe9\x2c\xf6\x6b\x2a\xe5\x6f\xc7\x43\xe9\xed\xe2\x4a\xf4\x77\x61\x6a\xc2\x34\x3f\x40\x23\xed\x50\x04\xb2\x0f\x7d\xa2\xc3\x32\xd1\x68\xf4\xe3\x2c\xdb\x6b\x53\x55\xba\x8b\xa9\x58\x4e\xe2\xe8\x5a\x01\x82\x56\xc9\x43\x15\x12\xca\x72\x09\xc1\x8c\xc7\x9c\xee\xc2\x36\x03\xd7\xdf\xc3\x44\x7e\xc7\xfe\x16\xc5\x4a\x84\x5f\xf4\x75\xb6\xd4\xba\x62\x76\x8b\x39\xaf\x39\xdc\xa0\xee\x5a\x13\xa6\x4e\x3d\x7d\x8d\x6a\x5d\x88\x13\x9b\xc6\x3e\x17\x1e\xcb\x8c\x6b\x8f\x81\x37\x62\x5e\xc4\x3a\x07\x50\xb3\x2d\x7d\x19\x2c\xe6\xa4\xb5\xc3\x72\x44\xb8\x38\x72\x3c\xc0\xfa\xc5\x1c\xec\xf7\xfb\x09\x34\xe3\xee\xfb\x48\xc6\xa0\x8b\xc0\xb3\x92\x23\x23\x24\x5d\xa3\xbc\xbf\xff\x66\x3e\xb3\xeb\x19\xee\x4f\x40\x7c\xa7\x5b\x54\xae\x1e\x5a\xc0\xd2\xda\x19\xec\x36\x3b\x0c\x7f\xc1\xb4\x11\x7a\x45\xc8\xd3\x36\x4d\x8d\x5e\x87\x33\xea\x2d\x46\x32\xe9\xb6\xaa\xf0\xec\x6e\x7d\x46\x98\xa2\x82\x6d\x4f\x89\x1b\xb7\x5c\xbb\x6f\xe2\x50\xe7\x83\x09\xb0\x88\xae\x0d\x08\xad\x43\x79\x18\xcc\x7d\x18\xee\x40\x06\xc7\x54\x80\x8a\xde\x99\x2e\xac\x29\xf9\xce\x27\x74\xc8\x7a\xc4\x2b\xe9\x8f\xb8\xc0\x9f\x47\x48\xbe\x51\x6d\x41\x55\x6e\x1b\x9e\x36\x3d\x70\xa4\x5b\x5b\x76\x24\xb8\xdd\xd7\xc4\x09\x9f\xac\x1b\xb5\x49\x17\xcf\xc8\x5e\x71\xc0\x23\xf6\xf2\x4d\xa0\x3a\x3a\x5f\x17\x78\x77\x6c\xdb\x40\x52\x68\x70\x8d\xb9\x38\x9d\x85\xe2\x7c\x28\x80\x09\xd2\x62\x1e\xb6\x4d\xae\x24\x1e\x75\x5a\x1e\x3a\x55\x03\xe7\x01\xdc\x31\xcb\xba\x5d\xcf\xe6\x6c\x31\x6f\xd0\x4f\xe7\x3f\xa5\x32\x12\x33\xf6\x2f\x8b\x7c\x3c\x8e\x93\xc1\xc4\xa9\xd0\x08\x1b\x4f\xdb\x5d\x05\xb5\x97\x59\x91\x2f\x0a\x94\x51\xdb\x23\x7e\x6c\x87\xd8\x7a\x5f\x9e\x3d\xa6\x18\xe5\xcb\x24\xbf\xd2\xbb\xb1\x13\x4b\x40\x63\x94\x17\xbf\x18\x37\xc7\x13\xdb\x37\x04\xce\xc5\xc9\x6e\x8a\x9c\xb8\x9b\x4d\x40\xb1\x14\xaa\x80\x99\xf1\xad\x30\x39\x6f\x9a\x5c\xc4\x24\xe9\x12\x84\xc1\xc8\x73\xf5\xe1\xe7\x7b\xde\xfe\x1e\xf1\x41\xab\x97\x31\xff\xd1\x3c\xf3\x38\xc5\xff\x15\x49\xf7\xfb\xc8\x09\x69\x73\xb7\xf3\x28\x7f\x45\xaf\x0b\x1e\x1c\x64\xce\x86\x26\x1e\xa2\xca\xb1\xb8\x0f\x83\x0d\x12\x93\x79\xdc\x8f\x58\xfa\x93\x21\xf2\xc1\x8c\xf3\x5b\xd3\xe2\xa7\x1e\x10\x75\x11\x05\xbd\x77\x5a\x63\xbd\x0e\x5b\xe4\x9c\x40\x60\xb1\x7b\x3a\xa3\x7e\x95\xbd\xf0\x4c\x47\x21\x68\x1a\xb9\x6c\xc4\x29\x74\x8c\x22\x9b\xb7\x1b\x33\x67\x4c\x5b\x18\x34\x26\xbe\x61\xd3\x7e\x56\xd7\xc8\x03\x67\xfa\x30\x25\x74\x07\x30\x3b\x06\x00\xfb\xf1\x71\xc5\x00\xcd\x19\xf4\xe6\xf5\xf9\xe5\x9b\x0f\xaf\xe9\x58\x90\x58\xfa\x85\x74\x05\x9e\xb6\x00\x97\xdd\x86\xb7\x1a\xfc\x1d\xe4\xa9\x27\xd5\x1f\x39\xe7\x0b\x3c\xc9\x64\xd4\x42\x7e\x86\x0b\x57\xfe\x63\xd0\x6e\x77\xa8\x8f\xe9\xcb\x11\x5e\x25\x04\x20\x74\xdc\xc0\x88\x56\xa4\x53\x2c\xce\xc6\xbd\x1e\x1b\xf8\x4c\x0d\xbf\x47\x3f\xad\x0f\x0f\x5e\x1d\x1c\xf1\x19\x34\x3d\xec\x29\x5f\xd1\x8b\x48\x4f\x42\x1d\xef\x02\x5c\x7d\x70\x87\x2f\xa0\xa6\xdc\xdd\xe3\x9f\x30\x8d\xe7\xf4\x47\x4a\x5e\x25\xf8\xfd\x65\xb1\xbf\x57\x6b\xd6\xaa\x85\x61\x96\xb1\x78\xbc\x37\x57\x94\xe8\x2e\x39\xbb\xdf\x82\x7d\xd8\x6c\x74\x1a\x87\x33\xff\x6f\x2c\xbd\x6e\x30\x54\xe9\x4a\x9e\xcd\xff\x49\x05\xd6\x27\x13\x98\x45\x65\xcb\x81\x5f\xc8\x29\x1e\x92\xef\x1a\xcd\xcb\x1f\x77\x1f\xab\xc3\x03\x71\xe0\xc1\x91\x70\x7f\xe4\x99\x84\x25\xad\x58\x51\x5e\x1c\x45\x23\x38\x27\xd2\xa9\x56\x56\x74\x60\x3a\x9e\x09\x0f\xce\xe4\x94\x61\x64\x3a\x08\x6e\x88\xdb\x4e\x66\x6d\x5a\x2b\x94\xc7\xd9\xdc\x62\x89\x98\xfe\x1b\x7e\x1d\xde\xc7\xe0\x1b\x95\x65\xf7\x3f\xd1\x06\x52\x8b\xc6\x96\x57\x07\x53\x48\x66\x3e\x8d\x71\x98\x49\x9f\x66\x29\xb9\x3a\xb7\xfc\x17\xa5\xcb\xa8\x76\x70\x04\xc7\x8c\x63\x0c\xbb\xe6\x90\x5f\xf6\x6f\x81\xb5\x87\x47\x47\x4c\x71\x09\x7c\xc7\xf2\xec\x5b\x99\x8e\x26\x1d\xff\x1a\xa3\xc7\x1e\xc4\x5b\x74\x4c\x6a\x2c\xf9\x15\x2a\xaf\x52\xf9\xdf\x84\x09\x55\xfe\x1f\x00\x00\xff\xff\x84\x04\x6a\xb0\x49\x11\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 4425, mode: os.FileMode(493), modTime: time.Unix(1474597773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico":     staticFaviconIco,
	"static/favicon.ico.gif": staticFaviconIcoGif,
	"templates/error.html":   templatesErrorHtml,
	"templates/form.html":    templatesFormHtml,
	"templates/index.html":   templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico":     &bintree{staticFaviconIco, map[string]*bintree{}},
		"favicon.ico.gif": &bintree{staticFaviconIcoGif, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"error.html": &bintree{templatesErrorHtml, map[string]*bintree{}},
		"form.html":  &bintree{templatesFormHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
